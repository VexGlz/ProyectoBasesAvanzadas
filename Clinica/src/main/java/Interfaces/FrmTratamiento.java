/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaces;

import Control.ControlTratamiento;
import Dao.CitaDAO;
import Dao.PacienteDAO;
import Dao.TratamientoDAO;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Cita;
import modelo.Paciente;
import modelo.Tratamiento;

/**
 *
 * @author Erick
 */
public class FrmTratamiento extends javax.swing.JFrame {

    private final PacienteDAO pacienteDAO = new PacienteDAO();
    private final CitaDAO citaDAO = new CitaDAO();
    private final TratamientoDAO tratamientoDAO = new TratamientoDAO();
    private final ControlTratamiento controlTratamiento = new ControlTratamiento(); // Instanciar el controlador
    private Cita citaSelec = null;

    /**
     * Creates new form FtmTratamiento
     */
    public FrmTratamiento() {
        initComponents();
        cargarPacientes();
        actualizarTablaTratamientos();
    }

    private void cargarPacientes() {
        List<Paciente> pacientes = pacienteDAO.listar();
        DefaultComboBoxModel<Paciente> modelo = new DefaultComboBoxModel<>();
        modelo.addElement(null);
        for (Paciente p : pacientes) {
            modelo.addElement(p);
        }
        cbPaciente.setModel(modelo);
    }

<<<<<<< HEAD
    private void cargarCitasPacientes(int idPaciente) {
        List<Cita> citas = citaDAO.listarPorPaciente(idPaciente);
        DefaultTableModel modelo = new DefaultTableModel(
                new Object[]{"ID Cita", "Doctor", "Fecha", "Motivo", "Estado"}, 0
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        for (Cita c : citas) {
            modelo.addRow(new Object[]{
                c.getId(),
                c.getDoctor() != null ? c.getDoctor().getNombre() + " " + c.getDoctor().getApellido() : "N/A",
                c.getFecha(),
                c.getMotivo(),
                c.getEstado()
            });
        }
        TbCitasPaciente.setModel(modelo);
        citaSelec = null;
    }
=======
    private void actualizarTablaTratamientos() {
        List<Cita> citas = citaDAO.listar(); // Todas las citas
>>>>>>> 9df1de2cd2ca02ad56345db6ae4a26cb7fb75833

    private void actualizarTablaTratamientos() {
       List<Cita> citas = citaDAO.listar();
        DefaultTableModel modelo = new DefaultTableModel(
                new Object[]{"ID Tratamiento", "ID Cita", "Paciente", "Fecha", "Descripcion"}, 0
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 4; // Solo la columna Descripcion editable
            }
        };
        for (Cita c : citas) {
            List<Tratamiento> tratamientos = tratamientoDAO.listarPorCita(c.getId());
            for (Tratamiento t : tratamientos) {
                modelo.addRow(new Object[]{
                    t.getId_tratamiento(),
                    c.getId(),
                    c.getPaciente().getNombre() + " " + c.getPaciente().getApellido(),
                    c.getFecha(),
                    t.getDescripcion()
                });
            }
        }
        TbTrataminetos.setModel(modelo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tfMedicamento = new javax.swing.JTextField();
        tfDosis = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        taObservaciones = new javax.swing.JTextArea();
        btnEliminar = new javax.swing.JButton();
        cbPaciente = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TbTrataminetos = new javax.swing.JTable();
        btnConfirmar1 = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnMenu = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        TbCitasPaciente = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 0, 36)); // NOI18N
        jLabel1.setText("TRATAMIENTO");

        jLabel2.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel2.setText("Medicamento");

        jLabel3.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel3.setText("Dosis");

        jLabel4.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel4.setText("Observaciones");

        taObservaciones.setColumns(20);
        taObservaciones.setRows(5);
        jScrollPane1.setViewportView(taObservaciones);

        btnEliminar.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        cbPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbPacienteActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel5.setText("Paciente");

        TbTrataminetos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(TbTrataminetos);

        btnConfirmar1.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        btnConfirmar1.setText("Confirmar");
        btnConfirmar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmar1ActionPerformed(evt);
            }
        });

        btnActualizar.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnMenu.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        btnMenu.setText("Menu ");
        btnMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuActionPerformed(evt);
            }
        });

        TbCitasPaciente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(TbCitasPaciente);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(btnConfirmar1)
                            .addComponent(btnMenu)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfDosis, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                            .addComponent(tfMedicamento))))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnEliminar)
                            .addGap(29, 29, 29)
                            .addComponent(btnActualizar)
                            .addGap(248, 248, 248))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36))))
            .addGroup(layout.createSequentialGroup()
                .addGap(235, 235, 235)
                .addComponent(jLabel1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cbPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfMedicamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfDosis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnConfirmar1)
                        .addGap(18, 18, 18)
                        .addComponent(btnMenu))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEliminar)
                    .addComponent(btnActualizar))
                .addGap(47, 47, 47))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbPacienteActionPerformed
        Paciente pacienteSeleccionado = (Paciente) cbPaciente.getSelectedItem();
        if (pacienteSeleccionado != null) {
            cargarCitasPacientes(pacienteSeleccionado.getId());
        } else {
            ((DefaultTableModel) TbCitasPaciente.getModel()).setRowCount(0);
            citaSelec = null; // Resetear la cita seleccionada
        }
    }//GEN-LAST:event_cbPacienteActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        int fila = TbTrataminetos.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona un tratamiento de la tabla.");
            return;
        }
        int idTratamiento = (int) TbTrataminetos.getValueAt(fila, 0);
        int confirmacion = JOptionPane.showConfirmDialog(this, "Seguro que quieres eliminar este tratamiento?", "", JOptionPane.YES_NO_OPTION);
        if (confirmacion == JOptionPane.YES_OPTION) {
            tratamientoDAO.eliminar(idTratamiento);
            JOptionPane.showMessageDialog(this, "Tratamiento eliminado.");
            actualizarTablaTratamientos();
        }
    }//GEN-LAST:event_btnEliminarActionPerformed


    private void btnConfirmar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmar1ActionPerformed
        if (citaSelec == null) {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona una cita de la tabla de citas del paciente.");
            return;
        }
<<<<<<< HEAD
=======

        List<Cita> citas = citaDAO.listarPorPaciente(paciente.getId());
        if (citas.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El paciente no tiene citas.");
            return;
        }

        // Tomamos la primera cita disponible
        Cita c = citas.get(0);
>>>>>>> 9df1de2cd2ca02ad56345db6ae4a26cb7fb75833
        String descripcion = taObservaciones.getText().trim();
        if (descripcion.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingresa la descripción del tratamiento.");
            return;
        }

        Tratamiento t = new Tratamiento();
        t.setCita(citaSelec);
        t.setDescripcion(descripcion);
        ControlTratamiento controlTratamiento = new ControlTratamiento();
        boolean exito = controlTratamiento.agregarTratamiento(citaSelec, descripcion);

        if (exito) {
            JOptionPane.showMessageDialog(this, "Tratamiento agregado.");
            taObservaciones.setText("");
            tfMedicamento.setText("");
            tfDosis.setText("");
            actualizarTablaTratamientos();
        } else {
            JOptionPane.showMessageDialog(this, "Error al agregar el tratamiento.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnConfirmar1ActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        int fila = TbTrataminetos.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona un tratamiento de la tabla.");
            return;
        }
        try {
            int idTratamiento = (int) TbTrataminetos.getValueAt(fila, 0);
            int idCita = (int) TbTrataminetos.getValueAt(fila, 1); 
            String nuevaDescripcion = (String) TbTrataminetos.getValueAt(fila, 4); 
            Cita citaAsociada = new Cita();
            citaAsociada.setId(idCita);
            boolean exito = controlTratamiento.actualizarTratamiento(idTratamiento, citaAsociada, nuevaDescripcion);
            if (exito) {
                JOptionPane.showMessageDialog(this, "Tratamiento actualizado correctamente.");
                actualizarTablaTratamientos(); 
            } else {
                JOptionPane.showMessageDialog(this, "Error al actualizar tratamiento.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al actualizar tratamiento: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuActionPerformed
        DaoMenuPrincipal menu = new DaoMenuPrincipal();
        menu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnMenuActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TbCitasPaciente;
    private javax.swing.JTable TbTrataminetos;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnConfirmar1;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnMenu;
    private javax.swing.JComboBox cbPaciente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea taObservaciones;
    private javax.swing.JTextField tfDosis;
    private javax.swing.JTextField tfMedicamento;
    // End of variables declaration//GEN-END:variables
}
