/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaces;

import Control.ControlPacientes;
import Dao.PacienteDAO;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Paciente;

/**
 *
 * @author Josel
 */
public class FrmGestionPaciente extends javax.swing.JFrame {

    private ControlPacientes controlPacientes = new ControlPacientes();
    private PacienteDAO pacienteDAO = new PacienteDAO();

    public FrmGestionPaciente() {
        initComponents();
        actualizarTablaPacientes();
    }

    private void actualizarTablaPacientes() {
        List<Paciente> pacientes = pacienteDAO.listar();
        DefaultTableModel modelo = new DefaultTableModel(
                new Object[]{"ID", "Nombre", "Apellido", "Edad", "Sexo", "Dirección", "Teléfono", "Correo"}, 0
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return column != 0;
            }
        };
        for (Paciente p : pacientes) {
            modelo.addRow(new Object[]{
                p.getId(),
                p.getNombre(),
                p.getApellido(),
                p.getEdad(),
                p.getSexo(),
                p.getDireccion(),
                p.getTelefono(),
                p.getCorreo()
            });
        }
        TbPacientes.setModel(modelo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TbPacientes = new javax.swing.JTable();
        btnEliminar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnMenu = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        jLabel1.setText("Pacientes");

        TbPacientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(TbPacientes);

        btnEliminar.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnActualizar.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnMenu.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        btnMenu.setText("Menu");
        btnMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(113, 113, 113))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnEliminar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnActualizar))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(156, 156, 156)
                        .addComponent(btnMenu)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEliminar)
                    .addComponent(btnActualizar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMenu)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        int filaSeleccionada = TbPacientes.getSelectedRow();
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona un paciente de la tabla para eliminar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int confirmacion = JOptionPane.showConfirmDialog(this, "¿Estás seguro de que quieres eliminar este paciente? Se eliminarán también sus citas, tratamientos y medicamentos asociados.", "Confirmar Eliminación", JOptionPane.YES_NO_OPTION);
        if (confirmacion == JOptionPane.YES_OPTION) {
            int idPaciente = (int) TbPacientes.getValueAt(filaSeleccionada, 0);
            boolean exito = controlPacientes.eliminarPaciente(idPaciente); 
            if (exito) {
                JOptionPane.showMessageDialog(this, "Paciente eliminado correctamente.");
                actualizarTablaPacientes(); 
            } else {
                JOptionPane.showMessageDialog(this, "Error al eliminar el paciente. Consulta la consola para más detalles.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        int filaSeleccionada = TbPacientes.getSelectedRow();
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona un paciente de la tabla para actualizar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            int id = (int) TbPacientes.getValueAt(filaSeleccionada, 0);
            String nombre = (String) TbPacientes.getValueAt(filaSeleccionada, 1);
            String apellido = (String) TbPacientes.getValueAt(filaSeleccionada, 2);

            int edad = Integer.parseInt(TbPacientes.getValueAt(filaSeleccionada, 3).toString());
            String sexo = (String) TbPacientes.getValueAt(filaSeleccionada, 4);
            String direccion = (String) TbPacientes.getValueAt(filaSeleccionada, 5);
            int telefono = Integer.parseInt(TbPacientes.getValueAt(filaSeleccionada, 6).toString());
            String correo = (String) TbPacientes.getValueAt(filaSeleccionada, 7);

            if (nombre.isEmpty() || apellido.isEmpty() || sexo.isEmpty() || direccion.isEmpty() || correo.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Los campos de texto no pueden estar vacíos.", "Error de Validación", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if (edad <= 0) {
                JOptionPane.showMessageDialog(this, "La edad debe ser un número positivo.", "Error de Validación", JOptionPane.WARNING_MESSAGE);
                return;
            }
            Paciente paciente = new Paciente(nombre, apellido, edad, sexo, direccion, telefono, correo);
            paciente.setId(id); 
            boolean exito = controlPacientes.actualizarPaciente(paciente);
            if (exito) {
                JOptionPane.showMessageDialog(this, "Paciente actualizado correctamente.");
                actualizarTablaPacientes(); 
            } else {
                JOptionPane.showMessageDialog(this, "Error al actualizar el paciente.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Verifica que los campos 'Edad' y 'Teléfono' contengan números válidos.", "Error de Formato Numérico", JOptionPane.ERROR_MESSAGE);
        } catch (ClassCastException e) {
            JOptionPane.showMessageDialog(this, "Error de tipo de dato al leer de la tabla. Asegúrate de que los datos sean correctos.", "Error Interno", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace(); 
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Ocurrió un error inesperado al actualizar: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }

    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuActionPerformed
        DaoMenuPrincipal menu = new DaoMenuPrincipal();
        menu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnMenuActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TbPacientes;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
